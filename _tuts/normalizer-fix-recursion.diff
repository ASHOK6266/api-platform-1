diff --git a/src/Serializer/Normalizer/UserNormalizer.php b/src/Serializer/Normalizer/UserNormalizer.php
index da34406..a4ddf0b 100644
--- a/src/Serializer/Normalizer/UserNormalizer.php
+++ b/src/Serializer/Normalizer/UserNormalizer.php
@@ -3,14 +3,16 @@
 namespace App\Serializer\Normalizer;
 
 use App\Entity\User;
+use Symfony\Component\Serializer\Normalizer\ContextAwareNormalizerInterface;
 use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
 use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
-use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 
-class UserNormalizer implements NormalizerInterface, NormalizerAwareInterface
+class UserNormalizer implements ContextAwareNormalizerInterface, NormalizerAwareInterface
 {
     use NormalizerAwareTrait;
 
+    private const ALREADY_CALLED = 'USER_NORMALIZER_ALREADY_CALLED';
+
     /**
      * @param User $object
      */
@@ -20,6 +22,8 @@ class UserNormalizer implements NormalizerInterface, NormalizerAwareInterface
             $context['groups'][] = 'owner:read';
         }
 
+        $context[self::ALREADY_CALLED] = true;
+
         $data = $this->normalizer->normalize($object, $format, $context);
 
         // Here: add, edit, or delete some data
@@ -27,8 +31,13 @@ class UserNormalizer implements NormalizerInterface, NormalizerAwareInterface
         return $data;
     }
 
-    public function supportsNormalization($data, $format = null): bool
+    public function supportsNormalization($data, $format = null, array $context = [])
     {
+        // avoid recursion: only call once per object
+        if (isset($context[self::ALREADY_CALLED])) {
+            return false;
+        }
+
         return $data instanceof User;
     }
 
