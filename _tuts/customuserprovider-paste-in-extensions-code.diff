diff --git a/src/DataProvider/UserApiResourceDataProvider.php b/src/DataProvider/UserApiResourceDataProvider.php
index f23e7305..2b34ac77 100644
--- a/src/DataProvider/UserApiResourceDataProvider.php
+++ b/src/DataProvider/UserApiResourceDataProvider.php
@@ -2,6 +2,8 @@
 
 namespace App\DataProvider;
 
+use ApiPlatform\Core\Bridge\Doctrine\Orm\Extension\QueryResultCollectionExtensionInterface;
+use ApiPlatform\Core\Bridge\Doctrine\Orm\Util\QueryNameGenerator;
 use ApiPlatform\Core\DataProvider\ContextAwareCollectionDataProviderInterface;
 use ApiPlatform\Core\DataProvider\RestrictedDataProviderInterface;
 use App\ApiResource\UserApiResource;
@@ -19,7 +21,17 @@ class UserApiResourceDataProvider implements ContextAwareCollectionDataProviderI
 
     public function getCollection(string $resourceClass, string $operationName = null, array $context = [])
     {
-        $users = $this->userRepository->findAll();
+        $queryBuilder = $repository->createQueryBuilder('o');
+        $queryNameGenerator = new QueryNameGenerator();
+        foreach ($this->collectionExtensions as $extension) {
+            $extension->applyToCollection($queryBuilder, $queryNameGenerator, $resourceClass, $operationName, $context);
+
+            if ($extension instanceof QueryResultCollectionExtensionInterface && $extension->supportsResult($resourceClass, $operationName, $context)) {
+                return $extension->getResult($queryBuilder, $resourceClass, $operationName, $context);
+            }
+        }
+
+        return $queryBuilder->getQuery()->getResult();
 
         return array_map(function(User $user) {
             $userResource = new UserApiResource();
