diff --git a/assets/js/admin.js b/assets/js/admin.js
index 5cef242..415bc22 100644
--- a/assets/js/admin.js
+++ b/assets/js/admin.js
@@ -1,7 +1,44 @@
 import React from 'react';
 import ReactDOM from 'react-dom';
-import { HydraAdmin } from '@api-platform/admin';
+import parseHydraDocumentation from '@api-platform/api-doc-parser/lib/hydra/parseHydraDocumentation';
+import { HydraAdmin, hydraClient, fetchHydra as baseFetchHydra } from '@api-platform/admin';
+import authProvider from './authProvider';
+import { Route, Redirect } from 'react-router-dom';
 
-const entrypoint = document.getElementById('api-entrypoint').innerText;
+const entrypoint = 'http://localhost:8000/api'; // Change this by your own entrypoint
+const fetchHeaders = {'Authorization': `Bearer ${localStorage.getItem('token')}`};
+const fetchHydra = (url, options = {}) => baseFetchHydra(url, {
+        ...options,
+    headers: new Headers(fetchHeaders),
+});
+const dataProvider = api => hydraClient(api, fetchHydra);
+const apiDocumentationParser = entrypoint =>
+parseHydraDocumentation(entrypoint, {
+    headers: new Headers(fetchHeaders),
+}).then(
+    ({ api }) => ({ api }),
+    result => {
+    const { api, status } = result;
 
-ReactDOM.render(<HydraAdmin entrypoint={entrypoint}/>, document.getElementById('api-platform-admin'));
+    if (status === 401) {
+        return Promise.resolve({
+            api,
+            status,
+            customRoutes: [
+            <Route path="/" render={() => <Redirect to="/login" />} />,
+    ],
+    });
+    }
+
+    return Promise.reject(result);
+}
+);
+
+ReactDOM.render(
+<HydraAdmin
+    apiDocumentationParser={apiDocumentationParser}
+    authProvider={authProvider}
+    entrypoint={entrypoint}
+    dataProvider={dataProvider}
+/>,
+document.getElementById('api-platform-admin'));
diff --git a/assets/js/authProvider.js b/assets/js/authProvider.js
new file mode 100644
index 0000000..70761b0
--- /dev/null
+++ b/assets/js/authProvider.js
@@ -0,0 +1,46 @@
+// admin/src/authProvider.js
+import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';
+
+// Change this to be your own authentication token URI.
+const authenticationTokenUri = `http://localhost:8000/authentication_token`;
+
+export default (type, params) => {
+    switch (type) {
+        case AUTH_LOGIN:
+            const { username, password } = params;
+            const request = new Request(authenticationTokenUri, {
+                method: 'POST',
+                body: JSON.stringify({ email: username, password }),
+                headers: new Headers({ 'Content-Type': 'application/json' }),
+            });
+
+            return fetch(request)
+                .then(response => {
+                if (response.status < 200 || response.status >= 300) throw new Error(response.statusText);
+
+            return response.json();
+    })
+.then(({ token }) => {
+        localStorage.setItem('token', token); // The JWT token is stored in the browser's local storage
+    window.location.replace('/');
+});
+
+case AUTH_LOGOUT:
+        localStorage.removeItem('token');
+    break;
+
+case AUTH_ERROR:
+        if (401 === params.status || 403 === params.status) {
+            localStorage.removeItem('token');
+
+            return Promise.reject();
+        }
+    break;
+
+case AUTH_CHECK:
+        return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();
+
+default:
+    return Promise.resolve();
+}
+}
\ No newline at end of file
