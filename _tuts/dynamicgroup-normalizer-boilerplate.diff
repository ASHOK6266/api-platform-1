diff --git a/config/services.yaml b/config/services.yaml
index 2c642fe..cf279da 100644
--- a/config/services.yaml
+++ b/config/services.yaml
@@ -31,3 +31,8 @@ services:
         decorates: 'api_platform.serializer.context_builder'
         arguments: [ '@App\Serializer\UserContextBuilder.inner' ]
         autoconfigure: false
+
+    'App\Serializer\UserNormalizer':
+        arguments: [ '@security.helper' ]
+        tags:
+            - { name: 'serializer.normalizer', priority: 64 }
\ No newline at end of file
diff --git a/src/Serializer/UserContextBuilder.php b/src/Serializer/UserContextBuilder.php
index 294ce07..6533ff4 100644
--- a/src/Serializer/UserContextBuilder.php
+++ b/src/Serializer/UserContextBuilder.php
@@ -24,6 +24,8 @@ final class UserContextBuilder implements SerializerContextBuilderInterface
 
         $isAdmin = $this->authorizationChecker->isGranted('ROLE_ADMIN');
 
+        $context['normalization'] = $normalization;
+
         if (isset($context['groups']) && $isAdmin) {
             if ($normalization) {
                 $context['groups'][] = 'admin:output';
diff --git a/src/Serializer/UserNormalizer.php b/src/Serializer/UserNormalizer.php
new file mode 100644
index 0000000..14789bf
--- /dev/null
+++ b/src/Serializer/UserNormalizer.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace App\Serializer;
+
+use App\Entity\User;
+use Symfony\Component\Security\Core\Security;
+use Symfony\Component\Serializer\Normalizer\ContextAwareNormalizerInterface;
+use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
+use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
+
+class UserNormalizer implements ContextAwareNormalizerInterface, NormalizerAwareInterface
+{
+    use NormalizerAwareTrait;
+
+    private const ALREADY_CALLED = 'USER_ATTRIBUTE_NORMALIZER_ALREADY_CALLED';
+
+    private $security;
+
+    public function __construct(Security $security)
+    {
+        $this->security = $security;
+    }
+
+    public function normalize($object, $format = null, array $context = [])
+    {
+        if ($this->userIsOwner($object)) {
+            if ($context['normalization']) {
+                $context['groups'][] = 'owner:output';
+            }
+            else {
+                $context['groups'][] = 'owner:input';
+            }
+        }
+        $context[self::ALREADY_CALLED] = true;
+
+        return $this->normalizer->normalize($object, $format, $context);
+    }
+
+    public function supportsNormalization($data, $format = null, array $context = [])
+    {
+        if (isset($context[self::ALREADY_CALLED])) {
+            return false;
+        }
+
+        return $data instanceof User;
+    }
+
+    private function userIsOwner($object): bool
+    {
+        // Get permissions from user in $this->tokenStorage
+        // for the current $object (book) and
+        // return true or false
+        return true;
+    }
+}
\ No newline at end of file
