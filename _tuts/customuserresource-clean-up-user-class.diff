diff --git a/src/Entity/User.php b/src/Entity/User.php
index b8926494..2e042e13 100644
--- a/src/Entity/User.php
+++ b/src/Entity/User.php
@@ -7,7 +7,6 @@ use Doctrine\Common\Collections\Collection;
 use Doctrine\ORM\Mapping as ORM;
 use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
 use Symfony\Component\Security\Core\User\UserInterface;
-use Symfony\Component\Serializer\Annotation\Groups;
 use Symfony\Component\Serializer\Annotation\SerializedName;
 use Symfony\Component\Validator\Constraints as Assert;
 
@@ -27,7 +26,6 @@ class User implements UserInterface
 
     /**
      * @ORM\Column(type="string", length=180, unique=true)
-     * @Groups({"user:read", "user:write"})
      * @Assert\NotBlank()
      * @Assert\Email()
      */
@@ -35,7 +33,6 @@ class User implements UserInterface
 
     /**
      * @ORM\Column(type="json")
-     * @Groups({"admin:read", "admin:write"})
      */
     private $roles = [];
 
@@ -47,28 +44,23 @@ class User implements UserInterface
 
     /**
      * @ORM\Column(type="string", length=255, unique=true)
-     * @Groups({"user:read", "user:write", "cheese:item:get"})
      * @Assert\NotBlank()
      */
     private $username;
 
     /**
      * @ORM\OneToMany(targetEntity="App\Entity\CheeseListing", mappedBy="owner", cascade={"persist"}, orphanRemoval=true)
-     * @Groups({"user:write"})
      * @Assert\Valid()
      */
     private $cheeseListings;
 
     /**
-     * @Groups("user:write")
      * @SerializedName("password")
-     * @Assert\NotBlank(groups={"create"})
      */
     private $plainPassword;
 
     /**
      * @ORM\Column(type="string", length=50, nullable=true)
-     * @Groups({"admin:read", "owner:read", "user:write"})
      */
     private $phoneNumber;
 
@@ -170,17 +162,6 @@ class User implements UserInterface
         return $this->cheeseListings;
     }
 
-    /**
-     * @Groups({"user:read"})
-     * @SerializedName("cheeseListings")
-     */
-    public function getPublishedCheeseListings(): Collection
-    {
-        return $this->cheeseListings->filter(function(CheeseListing $cheeseListing) {
-            return $cheeseListing->getIsPublished();
-        });
-    }
-
     public function addCheeseListing(CheeseListing $cheeseListing): self
     {
         if (!$this->cheeseListings->contains($cheeseListing)) {
