diff --git a/src/DataProvider/UserApiResourceDataProvider.php b/src/DataProvider/UserApiResourceDataProvider.php
index a23f3ae0..f23e7305 100644
--- a/src/DataProvider/UserApiResourceDataProvider.php
+++ b/src/DataProvider/UserApiResourceDataProvider.php
@@ -4,25 +4,30 @@ namespace App\DataProvider;
 
 use ApiPlatform\Core\DataProvider\ContextAwareCollectionDataProviderInterface;
 use ApiPlatform\Core\DataProvider\RestrictedDataProviderInterface;
-use ApiPlatform\Core\Exception\ResourceClassNotSupportedException;
 use App\ApiResource\UserApiResource;
+use App\Entity\User;
+use App\Repository\UserRepository;
 
 class UserApiResourceDataProvider implements ContextAwareCollectionDataProviderInterface, RestrictedDataProviderInterface
 {
+    private $userRepository;
+
+    public function __construct(UserRepository $userRepository)
+    {
+        $this->userRepository = $userRepository;
+    }
+
     public function getCollection(string $resourceClass, string $operationName = null, array $context = [])
     {
-        $user1 = new UserApiResource();
-        $user1->email = 'user@example.com';
-        $user1->id = 1;
-
-        $user2 = new UserApiResource();
-        $user2->email = 'user@example.com';
-        $user2->id = 2;
-
-        return [
-            $user1,
-            $user2,
-        ];
+        $users = $this->userRepository->findAll();
+
+        return array_map(function(User $user) {
+            $userResource = new UserApiResource();
+            $userResource->id = $user->getId();
+            $userResource->email = $user->getEmail();
+
+            return $userResource;
+        }, $users);
     }
 
     public function supports(string $resourceClass, string $operationName = null, array $context = []): bool
