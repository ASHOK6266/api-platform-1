diff --git a/src/DataFixtures/AppFixtures.php b/src/DataFixtures/AppFixtures.php
index a99ab48..affb76c 100644
--- a/src/DataFixtures/AppFixtures.php
+++ b/src/DataFixtures/AppFixtures.php
@@ -3,6 +3,7 @@
 namespace App\DataFixtures;
 
 use App\Entity\CheeseListing;
+use App\Entity\CheeseType;
 use App\Entity\Conversation;
 use App\Entity\Message;
 use App\Entity\User;
@@ -21,11 +22,25 @@ class AppFixtures extends Fixture
         $buyer->setUsername('Cheese Buyer');
         $manager->persist($buyer);
 
+        $cheeseType1 = new CheeseType();
+        $cheeseType1->setCategory('Firm');
+        $manager->persist($cheeseType1);
+        $cheeseType2 = new CheeseType();
+        $cheeseType2->setCategory('Fresh');
+        $manager->persist($cheeseType2);
+        $cheeseType3 = new CheeseType();
+        $cheeseType3->setCategory('Blue');
+        $manager->persist($cheeseType3);
+        $cheeseType4 = new CheeseType();
+        $cheeseType4->setCategory('Soft');
+        $manager->persist($cheeseType4);
+
         $cheeseListing = new CheeseListing();
         $cheeseListing->setUser($seller);
         $cheeseListing->setTitle('Cheese Title');
         $cheeseListing->setDescription('Cheese Description');
         $cheeseListing->setIsStinky(false);
+        $cheeseListing->setCheeseType($cheeseType1);
         $manager->persist($cheeseListing);
 
         $cheeseListing2 = new CheeseListing();
@@ -33,6 +48,7 @@ class AppFixtures extends Fixture
         $cheeseListing2->setTitle('Stinky Cheese');
         $cheeseListing2->setDescription('Bah');
         $cheeseListing2->setIsStinky(true);
+        $cheeseListing2->setCheeseType($cheeseType3);
         $manager->persist($cheeseListing2);
 
         $conversation = new Conversation();
diff --git a/src/Entity/CheeseListing.php b/src/Entity/CheeseListing.php
index 43ed59b..e83fa12 100644
--- a/src/Entity/CheeseListing.php
+++ b/src/Entity/CheeseListing.php
@@ -57,6 +57,12 @@ class CheeseListing
      */
     private $conversations;
 
+    /**
+     * @ORM\ManyToOne(targetEntity="App\Entity\CheeseType", inversedBy="cheeseListing")
+     * @ORM\JoinColumn(nullable=false)
+     */
+    private $cheeseType;
+
     public function __construct()
     {
         $this->createdAt = new \DateTime();
@@ -151,4 +157,16 @@ class CheeseListing
 
         return $this;
     }
+
+    public function getCheeseType(): ?CheeseType
+    {
+        return $this->cheeseType;
+    }
+
+    public function setCheeseType(?CheeseType $cheeseType): self
+    {
+        $this->cheeseType = $cheeseType;
+
+        return $this;
+    }
 }
diff --git a/src/Entity/CheeseType.php b/src/Entity/CheeseType.php
new file mode 100644
index 0000000..642fb13
--- /dev/null
+++ b/src/Entity/CheeseType.php
@@ -0,0 +1,91 @@
+<?php
+
+namespace App\Entity;
+
+use ApiPlatform\Core\Annotation\ApiFilter;
+use ApiPlatform\Core\Annotation\ApiResource;
+use ApiPlatform\Core\Bridge\Doctrine\Orm\Filter\SearchFilter;
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
+use Doctrine\ORM\Mapping as ORM;
+
+/**
+ * @ApiResource(
+ *     collectionOperations={"get"},
+ *     itemOperations={"get"}
+ * )
+ * @ApiFilter(SearchFilter::class, properties={"category": "exact"})
+ * @ORM\Entity(repositoryClass="App\Repository\CheeseTypeRepository")
+ */
+class CheeseType
+{
+    /**
+     * @ORM\Id()
+     * @ORM\GeneratedValue()
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @ORM\Column(type="string", length=255)
+     */
+    private $category;
+
+    /**
+     * @ORM\OneToMany(targetEntity="App\Entity\CheeseListing", mappedBy="cheeseType")
+     */
+    private $cheeseListing;
+
+    public function __construct()
+    {
+        $this->cheeseListing = new ArrayCollection();
+    }
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getCategory(): ?string
+    {
+        return $this->category;
+    }
+
+    public function setCategory(string $category): self
+    {
+        $this->category = $category;
+
+        return $this;
+    }
+
+    /**
+     * @return Collection|CheeseListing[]
+     */
+    public function getCheeseListing(): Collection
+    {
+        return $this->cheeseListing;
+    }
+
+    public function addCheeseListing(CheeseListing $cheeseListing): self
+    {
+        if (!$this->cheeseListing->contains($cheeseListing)) {
+            $this->cheeseListing[] = $cheeseListing;
+            $cheeseListing->setCheeseType($this);
+        }
+
+        return $this;
+    }
+
+    public function removeCheeseListing(CheeseListing $cheeseListing): self
+    {
+        if ($this->cheeseListing->contains($cheeseListing)) {
+            $this->cheeseListing->removeElement($cheeseListing);
+            // set the owning side to null (unless already changed)
+            if ($cheeseListing->getCheeseType() === $this) {
+                $cheeseListing->setCheeseType(null);
+            }
+        }
+
+        return $this;
+    }
+}
diff --git a/src/Repository/CheeseTypeRepository.php b/src/Repository/CheeseTypeRepository.php
new file mode 100644
index 0000000..58a891a
--- /dev/null
+++ b/src/Repository/CheeseTypeRepository.php
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\CheeseType;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Symfony\Bridge\Doctrine\RegistryInterface;
+
+/**
+ * @method CheeseType|null find($id, $lockMode = null, $lockVersion = null)
+ * @method CheeseType|null findOneBy(array $criteria, array $orderBy = null)
+ * @method CheeseType[]    findAll()
+ * @method CheeseType[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class CheeseTypeRepository extends ServiceEntityRepository
+{
+    public function __construct(RegistryInterface $registry)
+    {
+        parent::__construct($registry, CheeseType::class);
+    }
+
+    // /**
+    //  * @return CheeseType[] Returns an array of CheeseType objects
+    //  */
+    /*
+    public function findByExampleField($value)
+    {
+        return $this->createQueryBuilder('c')
+            ->andWhere('c.exampleField = :val')
+            ->setParameter('val', $value)
+            ->orderBy('c.id', 'ASC')
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult()
+        ;
+    }
+    */
+
+    /*
+    public function findOneBySomeField($value): ?CheeseType
+    {
+        return $this->createQueryBuilder('c')
+            ->andWhere('c.exampleField = :val')
+            ->setParameter('val', $value)
+            ->getQuery()
+            ->getOneOrNullResult()
+        ;
+    }
+    */
+}
diff --git a/tests/CheeseFunctionalTest.php b/tests/CheeseFunctionalTest.php
index 8cec05a..608b6ba 100644
--- a/tests/CheeseFunctionalTest.php
+++ b/tests/CheeseFunctionalTest.php
@@ -5,7 +5,9 @@ namespace App\Tests;
 use App\Entity\CheeseListing;
 use App\Entity\Message;
 use App\Entity\User;
+use PHPUnit\Runner\Exception;
 use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
+use Symfony\Component\Routing\Exception\MethodNotAllowedException;
 
 class CheeseFunctionalTest extends WebTestCase
 {
@@ -124,4 +126,19 @@ class CheeseFunctionalTest extends WebTestCase
 
         $this->assertTrue($json['hydra:totalItems'] === 0);
     }
+
+    public function testCheeseTypePost() {
+        $client = self::createClient([]);
+        $data = [
+            "category" => "stinky cheese",
+        ];
+        $json_data = json_encode($data);
+        $client->request(
+            'POST', '/api/cheese_types', [], [], [
+                'CONTENT_TYPE' => 'application/ld+json',
+                'HTTP_ACCEPT' => 'application/ld+json'
+            ], $json_data
+        );
+        $this->assertTrue($client->getResponse()->getStatusCode() === 405);
+    }
 }
